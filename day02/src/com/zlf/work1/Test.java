package com.zlf.work1;

/**
 * 基本概念题
 * 1)描述接口与类,接口与接口之间的关系
 * 类实现一个接口或者实现多个接口，接口继承单个接口或者继承多个接口
 * 2)描述接口优点(相对于继承)
 * 接口可以多实现，接口是对行为的抽象
 * 3)接口中成员的特点？
 * 接口中全是静态常量，默认用public static final修饰，接口中的方法全是抽象方法，默认用public abstract修饰
 * 4)接口和抽象类的区别？
 * 接口是对行为的抽象，抽象类是对事物的抽象，接口可以多实现，而抽象类只能单继承，接口里里面全部是常量和抽象方法，而抽象类可以定义普通方法和成员变量，接口不能有构造方法，抽象类可以定义构造方法
 * 5)多态的前提都有哪些?
 * 子类继承父类并且子类重写父类的方法，实现类实现接口并重写接口中的所有抽象方法
 * 6)多态情况下子父类中成员的特点？
 * 成员变量：编译和运行都看左边  成员方法：编译看左边，运行看右边
 * 7)多态的优缺点？
 * 优点：提高了代码的扩展性    缺点：不能调用子类独特的功能
 * 8)多态中的强转需要注意哪些事项;
 * 向上转型是安全的，向下转型是不安全的，需要使用if(anObject instanceof 类名)来判断
 * <p>
 * <p>
 * 2.
 * 根据需求完成代码:
 * (1)定义一个手机类
 * a.行为:打电话,发短信
 * <p>
 * (2)定义一个接口IPlay
 * a.行为:玩游戏
 * <p>
 * (3)定义一个旧手机类继承手机类
 * a.行为:继承父类的行为
 * <p>
 * (4)定义一个新手机继承手机类实现IPlay接口
 * a.行为:继承父类的行为,重写玩游戏方法
 * <p>
 * (5)定义一个测试类
 * a.在测试类中定义一个 用手机的方法,要求该方法既能接收老手机对象,也能接收新手机对象
 * 在该方法内部调用打电话,发短信以及新手机特有的玩游戏方法
 * <p>
 * 3.
 * 按要求完成下面的代码:
 * (1)动物类：
 * <p>
 * a.行为：
 * 吼叫；没有具体的吼叫行为
 * 吃饭:没有具体的吃饭行为
 * (2)缉毒接口
 * a.行为:
 * 缉毒
 * (3)缉毒狗:犬的一种
 * a.行为：
 * 吼叫:汪汪叫
 * 吃饭:狗啃骨头
 * 缉毒:用鼻子侦测毒
 * (4)测试类:
 * a.使用多态的形式创建缉毒狗对象,调用缉毒方法和吼叫方法
 * 4、
 * 分析以下需求，并用代码实现
 * 进行描述笔记本类，实现笔记本使用USB鼠标、USB键盘
 * (1) a.USB接口:
 * 开启功能
 * 关闭功能
 * <p>
 * b.笔记本类:
 * 开机功能
 * 关机功能
 * c.笔记本中定义使用USB设备的功能
 * 要求:既能使用鼠标也能使用键盘,使用USB功能内部调用开启和关闭功能
 * <p>
 * (3)鼠标类:
 * 要符合USB接口
 * <p>
 * (4)键盘类:
 * 要符合USB接口
 * <p>
 * (5)测试类:
 * 创建电脑对象,依次调用开机方法,使用USB设备, 关机方法
 * <p>
 * (6)打印效果如下:
 * 开机
 * 连接鼠标的USB
 * 断开鼠标的USB
 * 连接键盘的USB
 * 断开键盘的USB
 * 关机
 * 5、
 * 分析以下需求，并用代码实现
 * (1)动物类:
 * a.属性:年龄
 * b.行为:喝水,吃东西(吃什么不确定)
 * (2)游泳(Swimming)接口:
 * a.行为:游泳方法
 * (3)狗(Dog)类:
 * a.行为:吃饭(啃骨头)和 游泳(狗刨)
 * (4)羊(Sheep)类:
 * a.行为:吃饭(羊啃草)
 * (5)青蛙(Frog)类:
 * a.行为:吃饭(吃虫子)和 游泳(蛙泳)
 * (6)饲养员类:
 * a.行为:饲养动物:包括吃饭和喝水
 * (7)测试类:
 * a.创建饲养员对象,饲养员调用三次饲养方法:饲养狗,饲养羊,饲养青蛙
 * (8)要求:
 * a.子类重写父类中的吃东西方法
 * b.要求给狗和青蛙添加游泳的方法(实现游泳接口)
 * c.饲养员类中定义一个方法,传入动物类对象(父类),使用instanceof转换成子类,
 * 调用吃饭方法,如果有游泳方法也需进行测试
 * <p>
 * (9)打印如下格式的结果:
 * a.狗喝水
 * b.狗啃骨头
 * c.狗会狗刨游泳
 * <p>
 * d.青蛙喝水
 * e.青蛙吃小虫
 * f.青蛙会蛙泳
 * <p>
 * g.羊喝水
 * h.羊啃草
 * 6.老司机开车案例.
 * 1.定义一个汽车类Car.有一个抽象方法run().
 * 2.定义一个小客车BabyCar类继承Car类;
 * 3.定义一个公交车类Bus继承Car类
 * 4.在测试类中定义一个方法.//把Xxx修改成具体类型.
 * public static void dirverCar(Xxx x){
 * x.run();
 * }
 * 调用dirverCar方法.要求任何一种类型的车都可以开起来.
 */


/**
 * 实操题
 * 1.
 * <p>
 * 根据需求完成代码:
 * (1)定义一个动物类
 * a.行为:eat方法(无具体行为,不同动物吃的不一样)
 * <p>
 * (2)定义一个狗类继承动物类
 * a.行为:eat方法(啃骨头),看家方法
 * <p>
 * (3)定义一个猫类继承动物类
 * a.行为:eat方法(吃鱼),抓老鼠方法
 * <p>
 * (4)测试类:
 * a.定义一个方法,要求该方法既能接收狗对象也能接收猫对象
 * 在该方法的内部调用eat()方法,并且调用狗和猫的特有方法
 */
public class Test {
    public static void main(String[] args) {
        Animal dog = new Dog();
        useAnimal(dog);

        Animal cat = new Cat();
        useAnimal(cat);
    }

    public static void useAnimal(Animal a) {
        a.eat();

        if (a instanceof Cat) {
            ((Cat) a).cashMouse();
        }
        if (a instanceof Dog) {
            ((Dog) a).lookDoor();
        }
    }
}
